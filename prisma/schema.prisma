// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
  superadmin
}

model roleUser {
  id        Int      @id @default(autoincrement())
  roleType  Role     
  users     user[]
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model user {
  id        Int      @id @default(autoincrement())
  nama      String?
  email     String   @unique
  password  String
  roleId    Int    
  role      roleUser? @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  comments  comment[]
}

model category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  materi    materi[]
}

model materi {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  folder        String?
  image         String?
  link          String?
  radio         String?
  categoryId    Int
  approved      Boolean  @default(false)
  category      category? @relation(fields: [categoryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime? @updatedAt
  deletedAt     DateTime?

  comments    comment[]
}

model comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Relasi ke user
  user     user   @relation(fields: [userId], references: [id])
  userId   Int

  // Relasi ke materi
  materi   materi @relation(fields: [materiId], references: [id])
  materiId Int
}

